<!DOCTYPE html>
<html>
<head>
  <title>Doodle Up: Double Digits</title>
  <meta charset="UTF-8">
  <style>
    html, body {
      height: 100%;
      margin: 0;
    }
    body {
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }
    canvas {
      border: 1px solid black;
    }
    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1;
    }
    .death-screen {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
      color: white;
    }
    /* Added styles for the start game button */
    #startButton {
      margin-top: 20px;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  </style>
</head>
<body>
<canvas width="375" height="667" id="game"></canvas>
<div class="overlay" id="overlay">
  <div class="death-screen">
    <h1>Game Over!</h1>
    <p>Your Score: <span id="finalScore"></span></p>
    <p>High Score: <span id="finalHighScore"></span></p>
    <button onclick="resetGame()">Play Again</button>
  </div>
</div>
<!-- Start Game Button -->
<button id="startButton" onclick="startGame()">Start Game</button>
<p id="score" style="position: absolute; top: 10px; left: 10px; font-size: 24px;"></p>
<p id="highScore" style="position: absolute; top: 10px; right: 10px; font-size: 24px;"></p>
<script>
  const canvas = document.getElementById('game');
  const context = canvas.getContext('2d');
  let score = 0;
  let highScore = localStorage.getItem('highScore') || 0;
  let doodle = {
    x: canvas.width / 2,
    y: canvas.height - 30,
    width: 20,
    height: 20,
    dx: 0,
    dy: 0,
    isJumping: false
  };
  let platforms = [];
  let obstacles = [];
  let gameOver = false;
  let falling = false; // Variable to track if the player is falling
  let fallDuration = 0; // Variable to track how long the player has been falling
  const fallThreshold = 30; // Time threshold for falling before game over, in frames
  const platformSpeed = 2; // Speed of normal platforms
  const yellowPlatformSpeed = 1; // Speed of yellow platforms
  const yellowPlatformTimerDecrease = 2; // Amount to decrease the timer per frame when standing on a yellow platform

  // Function to generate platforms
  function generatePlatforms() {
    // Randomly determine if the platform will be a regular or falling platform
    const isFalling = Math.random() < 0.2; // 20% chance of being a falling platform
    const platformWidth = 300;
    const platformHeight = 20;
    const isYellow = Math.random() < 0.3; // 30% chance of being a yellow platform
    const yellowDuration = Math.floor(Math.random() * (300 - 180 + 1) + 180); // Random duration between 3 and 5 seconds
    platforms.push({
      x: Math.random() * (canvas.width - platformWidth), // Ensure platforms are generated within canvas width
      y: canvas.height + 50,
      width: platformWidth,
      height: platformHeight,
      isFalling: isFalling,
      isYellow: isYellow,
      yellowDuration: yellowDuration,
      yellowTimer: yellowDuration // Initialize yellow timer
    });
  }

  // Function to generate obstacles
  function generateObstacles() {
    obstacles.push({
      x: Math.random() * canvas.width,
      y: 0,
      width: 20,
      height: 20
    });
  }

  // Function to draw the doodle
  function drawDoodle() {
    context.fillStyle = 'blue';
    context.fillRect(doodle.x, doodle.y, doodle.width, doodle.height);
  }

  // Function to draw platforms
  function drawPlatforms() {
    platforms.forEach(platform => {
      if (platform.isYellow) {
        context.fillStyle = 'yellow'; // Yellow color for yellow platform
        context.fillRect(platform.x, platform.y, platform.width, platform.height);
        context.fillStyle = 'black';
        context.fillText(Math.ceil(platform.yellowTimer / 60), platform.x + platform.width / 2, platform.y + platform.height / 2);
      } else {
        context.fillStyle = platform.isFalling ? 'purple' : 'brown'; // Different color for falling platforms
        context.fillRect(platform.x, platform.y, platform.width, platform.height);
      }
    });
  }

  // Function to draw obstacles
  function drawObstacles() {
    context.fillStyle = 'red';
    obstacles.forEach(obstacle => {
      context.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
    });
  }

  // Function for collision detection between doodle and platforms
  function checkCollision() {
    let onPlatform = false; // Variable to track if the player is on any platform
    platforms.forEach(platform => {
      if (
        doodle.x < platform.x + platform.width &&
        doodle.x + doodle.width > platform.x &&
        doodle.y + doodle.height > platform.y &&
        doodle.y + doodle.height < platform.y + platform.height
      ) {
        if (platform.isYellow) {
          if (platform.yellowTimer <= 0) {
            platforms.splice(platforms.indexOf(platform), 1); // Remove yellow platform when timer runs out
          } else {
            doodle.y = platform.y - doodle.height;
            doodle.dy = -8;
            doodle.isJumping = false;
            onPlatform = true; // Set onPlatform to true if the player is on a platform
          }
        } else {
          doodle.y = platform.y - doodle.height;
          doodle.dy = -8;
          doodle.isJumping = false;
          onPlatform = true; // Set onPlatform to true if the player is on a platform
        }
      }
    });

    // If the player falls off the platforms and doesn't land on a platform in time, set falling to true
    if (!onPlatform && doodle.y > canvas.height) {
      falling = true;
    } else {
      falling = false;
      fallDuration = 0; // Reset fall duration if the player lands on a platform
    }

    obstacles.forEach(obstacle => {
      if (
        doodle.x < obstacle.x + obstacle.width &&
        doodle.x + doodle.width > obstacle.x &&
        doodle.y < obstacle.y + obstacle.height &&
        doodle.y + doodle.height > obstacle.y
      ) {
        endGame();
      }
    });

    // Check collision with left and right walls
    if (doodle.x < 0) {
      doodle.x = 0;
    } else if (doodle.x + doodle.width > canvas.width) {
      doodle.x = canvas.width - doodle.width;
    }

    // Check collision with top boundary
    if (doodle.y < 0) {
      doodle.y = canvas.height - 30; // Teleport the player down
    }
  }

  // Function to handle keyboard input
  document.addEventListener('keydown', function(event) {
    if (event.key === 'ArrowLeft') {
      doodle.dx = -2;
    } else if (event.key === 'ArrowRight') {
      doodle.dx = 2;
    } else if (event.key === 'ArrowUp' && !doodle.isJumping) {
      doodle.isJumping = true;
      doodle.dy = -8;
    }
  });

  document.addEventListener('keyup', function(event) {
    if ((event.key === 'ArrowLeft' && doodle.dx === -2) || (event.key === 'ArrowRight' && doodle.dx === 2)) {
      doodle.dx = 0;
    }
  });

  // Function to start the game
  function startGame() {
    document.getElementById('startButton').style.display = 'none';
    gameLoop();
  }

  // Main game loop
  function gameLoop() {
    context.clearRect(0, 0, canvas.width, canvas.height);

    drawPlatforms(); // Draw the platforms
    drawObstacles(); // Draw the obstacles
    drawDoodle(); // Draw the doodle

    platforms.forEach(platform => {
      let speed = platform.isYellow ? yellowPlatformSpeed : platformSpeed;
      platform.y -= platform.isFalling ? 6 : speed; // Move platforms upwards, faster for falling platforms
      if (platform.y < 0) {
        platforms.splice(platforms.indexOf(platform), 1); // Remove platforms that go off-screen
      }
      if (platform.isYellow && doodle.x >= platform.x && doodle.x <= platform.x + platform.width && doodle.y + doodle.height >= platform.y && doodle.y + doodle.height <= platform.y + platform.height) {
        if (platform.yellowTimer <= 0) {
          platforms.splice(platforms.indexOf(platform), 1); // Remove yellow platform when timer runs out
        } else {
          platform.yellowTimer -= yellowPlatformTimerDecrease;
        }
      }
    });
    if (platforms.length < 5) {
      generatePlatforms(); // Generate new platforms
    }

    obstacles.forEach(obstacle => {
      obstacle.y += 2; // Move obstacles downwards
      if (obstacle.y > canvas.height) {
        obstacles.splice(obstacles.indexOf(obstacle), 1); // Remove obstacles that go off-screen
      }
    });
    if (obstacles.length < 3) {
      generateObstacles(); // Generate new obstacles
    }

    doodle.x += doodle.dx; // Update doodle's horizontal position

    checkCollision(); // Check for collision with platforms, obstacles, and boundaries

    if (doodle.isJumping) {
      doodle.y += doodle.dy;
      doodle.dy += 0.2; // Apply adjusted gravity
      if (doodle.y > canvas.height - 30) {
        doodle.y = canvas.height - 30; // Prevent the doodle from falling through the floor
        doodle.dy = 0;
        doodle.isJumping = false;
      }
    } else {
      doodle.y += 3; // Apply gravity when doodle is not jumping
    }

    // Update and display score based on doodle's ascent
    if (doodle.dy < 0) {
      score++;
      document.getElementById('score').textContent = 'Score: ' + score;
    }

    // Update and display high score
    if (score > highScore) {
      highScore = score;
      localStorage.setItem('highScore', highScore);
    }
    document.getElementById('highScore').textContent = 'High Score: ' + highScore;

    // Check if the player is falling and below the canvas height
    if (falling && doodle.y > canvas.height) {
      fallDuration++;
      if (fallDuration > fallThreshold) {
        endGame();
      }
    }

    if (gameOver) {
      document.getElementById('finalScore').textContent = score;
      document.getElementById('finalHighScore').textContent = highScore;
      document.getElementById('overlay').style.display = 'block';
    } else {
      requestAnimationFrame(gameLoop);
    }
  }

  // Function to end the game
  function endGame() {
    gameOver = true;
  }

  // Function to reset the game
  function resetGame() {
    score = 0;
    doodle.x = canvas.width / 2;
    doodle.y = canvas.height - 30;
    platforms = [];
    obstacles = [];
    gameOver = false;
    falling = false; // Reset the variable
    fallDuration = 0; // Reset the fall duration
    document.getElementById('overlay').style.display = 'none';
    gameLoop();
  }

</script>
</body>
</html>
